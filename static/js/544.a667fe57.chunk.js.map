{"version":3,"file":"static/js/544.a667fe57.chunk.js","mappings":"mQAEMA,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAOC,GAAP,uFACRF,EAAAA,EAAAA,IAAU,qBAAsB,CACnDE,OAAAA,EACAC,OAAQ,CACJC,QAASL,KAJc,cACzBM,EADyB,yBAQxBA,EAASC,KAAKC,SARU,2CAAH,sDAWnBC,EAAW,mCAAG,gGAASC,EAAT,EAASA,WAAYP,EAArB,EAAqBA,OAArB,SACAF,EAAAA,EAAAA,IAAU,eAAgB,CAC7CE,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTW,MAAOD,EACPE,eAAe,EACfC,KAAM,KAPS,cACjBP,EADiB,yBAWhBA,EAASC,KAAKC,SAXE,2CAAH,sDAcXM,EAAiB,mCAAG,gGAASC,EAAT,EAASA,QAASZ,EAAlB,EAAkBA,OAAlB,SACNF,EAAAA,EAAAA,IAAA,gBAAmBc,GAAW,CACjDZ,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTgB,SAAU,WALW,cACvBV,EADuB,yBAStBA,EAASC,KAAKC,SATQ,2CAAH,qD,wFCP9B,EArBmB,SAAC,GAAsC,IAApCS,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,aAC5BC,GAAWC,EAAAA,EAAAA,MAEXC,EAASJ,GAAkBC,GAAgB,GAEjD,OACI,wBACKG,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,kBAAmBC,EAAvC,EAAuCA,MAAOC,EAA9C,EAA8CA,aAAcC,EAA5D,EAA4DA,eAA5D,OACR,yBACI,UAAC,KAAD,CAAMC,GAAE,iBAAYN,GAAMO,MAAO,CAAEC,KAAMZ,GAAzC,WACI,gBAAKa,IAAG,yCAAoCR,GAAeS,IAAKP,EAAOQ,MAAM,SAC7E,wBAAKN,KACL,yBAAG,sBAAoBH,MACvB,yBAAG,iBAAeE,SALjBJ,EADD,KAYvB,C,0HC8BD,UA9Ca,WACX,OAAoCY,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAkBC,EAAAA,EAAAA,UA+BxB,OA7BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAqB,mCAAG,oGAEtBH,EAAgBI,SAClBJ,EAAgBI,QAAQC,QAG1BL,EAAgBI,QAAU,IAAIE,gBAE9BT,GAAW,GACXE,EAAS,MATiB,UAWLvC,EAAAA,EAAAA,IAAoBwC,EAAgBI,QAAQ3C,QAXvC,OAWpBkB,EAXoB,OAa1BgB,EAAchB,GACdkB,GAAW,GAde,kDAgBP,eAAf,KAAMU,OACRR,EAAS,uDACTF,GAAW,IAlBa,yBAqBxBA,GAAW,GArBa,6EAAH,qDAyB7BM,GACD,GAAE,KAGC,4BACE,wBAAI,4BACHP,IAAW,SAAC,IAAD,KACVA,GAAWF,EAAWc,OAAS,IAAK,SAAC,IAAD,CAAYjC,eAAgBmB,IACjEI,IAAS,yBAAMA,MAGrB,C","sources":["Services/Services.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = '46ee399c81006beac7a91a0ab15f7750';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async (signal) => {\n    const response = await axios.get('trending/movie/day', {\n        signal,\n        params: {\n            api_key: KEY,\n        }\n    });\n    \n    return response.data.results;\n};\n\nexport const fetchMovies = async ({ nameMovies, signal }) => {\n    const response = await axios.get('search/movie', {\n        signal,\n        params: {\n            api_key: KEY,\n            query: nameMovies,\n            include_adult: false,\n            page: 1,\n        }\n    });\n\n    return response.data.results;\n}\n\nexport const fetchMovieDetails = async ({ movieId, signal }) => {\n    const response = await axios.get(`movie/${movieId}`, {\n        signal,\n        params: { \n            api_key: KEY,\n            language: 'en-US', \n        }\n    })\n\n    return response.data.results;\n}","import { Link, useLocation } from \"react-router-dom\";\n\nconst MoviesList = ({ moviesTrending, moviesSearch }) => {\n    const location = useLocation();\n\n    const movies = moviesTrending || moviesSearch || [];\n\n    return (\n        <ul>\n            {movies.map(({ id, poster_path, original_language, title, release_date, original_title }) => (\n                <li key={id}>\n                    <Link to={`movies/${id}`} state={{ from: location }}>\n                        <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} width=\"200\" />\n                        <h2>{original_title}</h2>\n                        <p>Original language: {original_language}</p>\n                        <p>Release date: {release_date}</p>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default MoviesList;","import Loader from \"components/Loader\";\nimport MoviesList from \"components/MoviesList\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { fetchTrendingMovies } from \"Services/Services\";\n\nconst Home = () => {\n  const [moviesList, setMoviesList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const abortController = useRef();\n\n  useEffect(() => {\n    const getTrendingWeekMovies = async () => {\n      try {\n        if (abortController.current) {\n          abortController.current.abort();\n        }\n          \n        abortController.current = new AbortController();\n          \n        setLoading(true);\n        setError(null);\n          \n        const movies = await fetchTrendingMovies(abortController.current.signal);\n        \n        setMoviesList(movies);\n        setLoading(false);\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          setError(\"Sorry, an error occurred :( Try reloading the page!\");\n          setLoading(false);\n        }\n      } finally {\n          setLoading(false);\n      }\n  };\n\n  getTrendingWeekMovies();\n}, []);\n\n  return(\n    <div>\n      <h1>This day's movie trends</h1>\n      {loading && <Loader />}\n      {!loading && moviesList.length > 0 && <MoviesList moviesTrending={moviesList} />}\n      {error && <div>{error}</div>}\n    </div>\n  )\n};\n\nexport default Home;"],"names":["KEY","axios","fetchTrendingMovies","signal","params","api_key","response","data","results","fetchMovies","nameMovies","query","include_adult","page","fetchMovieDetails","movieId","language","moviesTrending","moviesSearch","location","useLocation","movies","map","id","poster_path","original_language","title","release_date","original_title","to","state","from","src","alt","width","useState","moviesList","setMoviesList","loading","setLoading","error","setError","abortController","useRef","useEffect","getTrendingWeekMovies","current","abort","AbortController","name","length"],"sourceRoot":""}