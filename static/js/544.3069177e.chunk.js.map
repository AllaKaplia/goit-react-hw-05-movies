{"version":3,"file":"static/js/544.3069177e.chunk.js","mappings":"yOAEMA,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAOC,GAAP,uFACRF,EAAAA,EAAAA,IAAU,mBAAoB,CACjDE,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTM,YAAa,UALU,cACzBC,EADyB,yBASxBA,EAASC,KAAKC,SATU,2CAAH,sDAYnBC,EAAW,mCAAG,gGAASC,EAAT,EAASA,WAAYR,EAArB,EAAqBA,OAArB,SACAF,EAAAA,EAAAA,IAAU,eAAgB,CAC7CE,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTY,MAAOD,EACPE,eAAe,EACfC,KAAM,KAPS,cACjBP,EADiB,yBAWhBA,EAASC,KAAKC,SAXE,2CAAH,qD,8ECWxB,EA1BmB,SAAC,GAAc,IAAbM,EAAY,EAAZA,OACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAU,SAACC,GACb,MAAyB,YAAtBH,EAASI,SACF,GAAN,OAAUD,GAER,UAAN,OAAiBA,EACpB,EAED,OACI,wBACKJ,EAAOM,KAAI,gBAAEF,EAAF,EAAEA,GAAIG,EAAN,EAAMA,YAAaC,EAAnB,EAAmBA,kBAAmBC,EAAtC,EAAsCA,MAAOC,EAA7C,EAA6CA,aAAcC,EAA3D,EAA2DA,eAA3D,OACR,yBACI,eAAGC,KAAMT,EAAQC,GAAKS,GAAIV,EAAQC,GAAKU,MAAO,CAAEC,KAAMd,GAAtD,WACI,gBAAKe,IAAG,yCAAoCT,GAAeU,IAAKR,EAAOS,MAAM,SAC7E,wBAAKP,KACL,yBAAG,sBAAoBH,MACvB,yBAAG,iBAAeE,SALjBN,EADD,KAYvB,C,0HCwBD,UA7Ca,WACX,OAAoCe,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAkBC,EAAAA,EAAAA,UA8BxB,OA5BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAqB,mCAAG,oGAEtBH,EAAgBI,SAClBJ,EAAgBI,QAAQC,QAG1BL,EAAgBI,QAAU,IAAIE,gBAE9BT,GAAW,GACXE,EAAS,MATiB,UAWLtC,EAAAA,EAAAA,GAAoBuC,EAAgBI,QAAQ1C,QAXvC,OAWpBY,EAXoB,OAY1BqB,EAAcrB,GACduB,GAAW,GAbe,kDAeP,eAAf,KAAMU,OACRR,EAAS,uDACTF,GAAW,IAjBa,yBAoBxBA,GAAW,GApBa,6EAAH,qDAwB7BM,GACD,GAAE,KAGC,4BACE,wBAAI,6BACHP,IAAW,SAAC,IAAD,KACVA,GAAWF,EAAWc,OAAS,IAAK,SAAC,IAAD,CAAYlC,OAAQoB,IACzDI,IAAS,yBAAMA,MAGrB,C","sources":["Services/Services.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = '46ee399c81006beac7a91a0ab15f7750';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async (signal) => {\n    const response = await axios.get('trending/all/day', {\n        signal,\n        params: {\n            api_key: KEY,\n            time_window: 'week'\n        }\n    });\n    \n    return response.data.results;\n};\n\nexport const fetchMovies = async ({ nameMovies, signal }) => {\n    const response = await axios.get('search/movie', {\n        signal,\n        params: {\n            api_key: KEY,\n            query: nameMovies,\n            include_adult: false,\n            page: 1,\n        }\n    });\n\n    return response.data.results;\n}","import { useLocation } from \"react-router-dom\";\n\nconst MoviesList = ({movies}) => {\n    const location = useLocation();\n\n    const cardURL = (id) => {\n        if(location.pathname === '/movies'){\n            return `${id}`;\n        }\n        return `movies/${id}`;\n    }\n\n    return (\n        <ul>\n            {movies.map(({id, poster_path, original_language, title, release_date, original_title }) => (\n                <li key={id}>\n                    <a href={cardURL(id)} to={cardURL(id)} state={{ from: location}}>\n                        <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} width=\"200\" />\n                        <h2>{original_title}</h2>\n                        <p>Original language: {original_language}</p>\n                        <p>Release date: {release_date}</p>\n                    </a>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default MoviesList;","import Loader from \"components/Loader\";\nimport MoviesList from \"components/MoviesList\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { fetchTrendingMovies } from \"Services/Services\";\n\nconst Home = () => {\n  const [moviesList, setMoviesList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const abortController = useRef();\n\n  useEffect(() => {\n    const getTrendingWeekMovies = async () => {\n      try {\n        if (abortController.current) {\n          abortController.current.abort();\n        }\n          \n        abortController.current = new AbortController();\n          \n        setLoading(true);\n        setError(null);\n          \n        const movies = await fetchTrendingMovies(abortController.current.signal);\n        setMoviesList(movies);\n        setLoading(false);\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          setError(\"Sorry, an error occurred :( Try reloading the page!\");\n          setLoading(false);\n        }\n      } finally {\n          setLoading(false);\n      }\n  };\n\n  getTrendingWeekMovies();\n}, []);\n\n  return(\n    <div>\n      <h1>This week's movie trends</h1>\n      {loading && <Loader />}\n      {!loading && moviesList.length > 0 && <MoviesList movies={moviesList} />}\n      {error && <div>{error}</div>}\n  </div>\n  )\n};\n\nexport default Home;"],"names":["KEY","axios","fetchTrendingMovies","signal","params","api_key","time_window","response","data","results","fetchMovies","nameMovies","query","include_adult","page","movies","location","useLocation","cardURL","id","pathname","map","poster_path","original_language","title","release_date","original_title","href","to","state","from","src","alt","width","useState","moviesList","setMoviesList","loading","setLoading","error","setError","abortController","useRef","useEffect","getTrendingWeekMovies","current","abort","AbortController","name","length"],"sourceRoot":""}