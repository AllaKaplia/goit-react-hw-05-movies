{"version":3,"file":"static/js/285.ec5e3e19.chunk.js","mappings":"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","sources":["Services/Services.jsx","components/MoviesList/MoviesList.jsx","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = '46ee399c81006beac7a91a0ab15f7750';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async (signal) => {\n    const response = await axios.get('trending/all/day', {\n        signal,\n        params: {\n            api_key: KEY,\n            time_window: 'week'\n        }\n    });\n    \n    return response.data.results;\n};\n\nexport const fetchMovies = async ({ nameMovies, signal }) => {\n    const response = await axios.get('search/movie', {\n        signal,\n        params: {\n            api_key: KEY,\n            query: nameMovies,\n            include_adult: false,\n            page: 1,\n        }\n    });\n\n    return response.data.results;\n}","import { useLocation } from \"react-router-dom\";\n\nconst MoviesList = ({movies}) => {\n    const location = useLocation();\n\n    const cardURL = (id) => {\n        if(location.pathname === '/movies'){\n            return `${id}`;\n        }\n        return `movies/${id}`;\n    }\n\n    return (\n        <ul>\n            {movies.map(({id, poster_path, original_language, title, release_date, original_title }) => (\n                <li key={id}>\n                    <a href={cardURL(id)} to={cardURL(id)} state={{ from: location}}>\n                        <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} width=\"200\" />\n                        <h2>{original_title}</h2>\n                        <p>Original language: {original_language}</p>\n                        <p>Release date: {release_date}</p>\n                    </a>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default MoviesList;","import * as yup from 'yup';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { Field, Form, Formik } from 'formik';\nimport { RiMovie2Line } from 'react-icons/ri';\n\n\nexport default function SearchBar({ onChange }){\n    const [searchParams, setSearchParams] = useSearchParams();\n    const movieName = searchParams.get('queryMovie') ?? '';\n\n    const schema = yup.object().shape({\n        queryMovie: yup\n        .string()\n        .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Name is invalid')\n        .required('Name is required'),\n    })\n\n    const initialValue = {\n        queryMovie: ''\n    }\n\n    useEffect(() => {\n        if(!movieName){\n            return;\n        }\n\n        onChange(movieName);\n    }, [movieName, onChange]);\n\n    const handleSearchForm = (value) => {\n        const queryMovie = value.queryMovie;\n        const searchQuery = queryMovie !== '' ? { queryMovie } : {};\n    \n        setSearchParams(searchQuery);\n        onChange(queryMovie);\n    }\n   \n    return (\n        <Formik initialValues={initialValue} validationSchema={schema} onSubmit={handleSearchForm}>\n            {({ handleSubmit, errors }) => (\n            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Field \n                type=\"text\" \n                name='queryMovie'\n                autoFocus\n                placeholder=\"Search movies\"\n                />\n                <button type='submit'>\n                    <span>Search</span>\n                    <RiMovie2Line />\n                </button>\n                {errors.queryMovie && <div>{errors.queryMovie}</div>}\n            </Form>\n            )}\n        </Formik>\n    )\n}","import { useRef, useState, useEffect } from \"react\";\nimport SearchBox from \"components/SearchBox\";\nimport { toast, ToastContainer } from 'react-toastify';\nimport { fetchMovies } from \"Services/Services\";\nimport Loader from \"components/Loader\";\nimport MoviesList from \"components/MoviesList\";\n\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [nameMovie, setNameMovie] = useState('');\n    const [error, setError] = useState(null);\n    const abortController = useRef();\n\n    useEffect(() => {\n        if (nameMovie === '') {\n            return;\n        }\n\n        const getMovieList = () => {\n            try {\n                if(abortController.current) {\n                    abortController.current.abort();\n                }\n\n                abortController.current = new AbortController();\n\n                setLoading(true);\n                setError(false);\n\n                const movieList = fetchMovies(nameMovie, abortController.current.signal);\n                if(movieList.length === 0){\n                    toast.info('Sorry, no movies were found for your request :(');\n                }\n\n                setMovies(movieList);\n                setError(null);\n            } catch (error) {\n                if(error.name !== \"AbortError\"){\n                    setError(\"Sorry, an error occurred :( Try reloading the page!\");\n                    setLoading(false);\n                }\n            } finally {\n                setLoading(false);\n            }\n\n        };\n\n        getMovieList();\n    }, [nameMovie])\n\n    const onNameMovieChange = (query) => {\n        if(query === nameMovie) {\n            return;\n        }\n\n        setNameMovie(query);\n        setError(null);\n    }\n\n    return (\n        <div>\n            <ToastContainer autoClose={3000} theme=\"colored\" />\n            <SearchBox onChange={onNameMovieChange} />\n            {loading && <Loader />}\n            {!loading && movies.length > 0 && <MoviesList movies={movies} />}\n            {error && <div>{error}</div>}\n        </div>\n    )\n}\n\nexport default Movies;"],"names":["KEY","axios","fetchTrendingMovies","signal","params","api_key","time_window","response","data","results","fetchMovies","nameMovies","query","include_adult","page","movies","location","useLocation","cardURL","id","pathname","map","poster_path","original_language","title","release_date","original_title","href","to","state","from","src","alt","width","SearchBar","onChange","useSearchParams","searchParams","setSearchParams","movieName","get","schema","yup","shape","queryMovie","matches","required","useEffect","initialValues","validationSchema","onSubmit","value","handleSubmit","errors","autoComplete","type","name","autoFocus","placeholder","useState","setMovies","loading","setLoading","nameMovie","setNameMovie","error","setError","abortController","useRef","current","abort","AbortController","movieList","length","toast","getMovieList","autoClose","theme","Loader","MoviesList"],"sourceRoot":""}