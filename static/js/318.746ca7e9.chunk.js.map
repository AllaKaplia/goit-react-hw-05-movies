{"version":3,"file":"static/js/318.746ca7e9.chunk.js","mappings":"kTAEMA,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAOC,GAAP,uFACRF,EAAAA,EAAAA,IAAU,qBAAsB,CACnDE,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTM,SAAU,WALa,cACzBC,EADyB,yBASxBA,EAASC,KAAKC,SATU,2CAAH,sDAYnBC,EAAW,mCAAG,gGAASC,EAAT,EAASA,WAAYR,EAArB,EAAqBA,OAArB,SACAF,EAAAA,EAAAA,IAAU,eAAgB,CAC7CE,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTY,MAAOD,KALQ,cACjBJ,EADiB,yBAShBA,EAASC,KAAKC,SATE,2CAAH,sDAYXI,EAAiB,mCAAG,gGAASC,EAAT,EAASA,QAASX,EAAlB,EAAkBA,OAAlB,SACNF,EAAAA,EAAAA,IAAA,gBAAmBa,GAAW,CACjDX,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTM,SAAU,WALW,cACvBC,EADuB,yBAStBA,EAASC,MATa,2CAAH,sDAYjBO,EAAS,mCAAG,gGAASD,EAAT,EAASA,QAASX,EAAlB,EAAkBA,OAAlB,SACEF,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsC,CACzDX,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTM,SAAU,WALG,cACfC,EADe,yBASdA,EAASC,KAAKQ,MATA,2CAAH,sDAYTC,EAAY,mCAAG,gGAASH,EAAT,EAASA,QAASX,EAAlB,EAAkBA,OAAlB,SACDF,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsC,CACzDX,OAAAA,EACAC,OAAQ,CACJC,QAASL,EACTM,SAAU,WALM,cAClBC,EADkB,yBASjBA,EAASC,KAAKC,SATG,2CAAH,qD,gKCYzB,EA1Da,WACT,OAAwBS,EAAAA,EAAAA,UAAS,MAAjC,eAAOF,EAAP,KAAaG,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQT,GAAYU,EAAAA,EAAAA,MAAZV,QACFW,GAAkBC,EAAAA,EAAAA,UAmCxB,OAjCAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,oGAEZH,EAAgBI,SACfJ,EAAgBI,QAAQC,QAG5BL,EAAgBI,QAAU,IAAIE,gBAE9BV,GAAW,GACXE,EAAS,MATM,UAWWR,EAAAA,EAAAA,GAAU,CAChCD,QAASA,EACTX,OAAQsB,EAAgBI,QAAQ1B,SAbrB,OAWT6B,EAXS,OAgBfb,EAAQa,GACRT,EAAS,MAjBM,kDAmBI,iBAAf,KAAMU,OACNV,EAAS,uDACTF,GAAW,IArBA,yBAwBfA,GAAW,GAxBI,6EAAH,qDA2BpBO,GACH,GAAE,CAACd,KAKA,2BACKM,IAAW,SAACc,EAAA,EAAD,IACXlB,IAAQ,wBACIA,EAAKmB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,cAAeC,EAAvC,EAAuCA,aAAcC,EAArD,EAAqDA,WAArD,OACN,2BACI,gBAAKC,IAAKF,EAAY,yCAAqCA,G,itJAAmCG,IAAKN,EAAMO,MAAO,OAChH,wBAAKL,KACL,0BAAI,mCAAiCD,MACrC,yBAAG,kCAAgCG,OAJ9BL,EADH,MASrBd,IAAS,yBAAMA,EAAMuB,YAGjC,C","sources":["Services/Services.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = '46ee399c81006beac7a91a0ab15f7750';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async (signal) => {\n    const response = await axios.get('trending/movie/day', {\n        signal,\n        params: {\n            api_key: KEY,\n            language: 'en-US'\n        }\n    });\n    \n    return response.data.results;\n};\n\nexport const fetchMovies = async ({ nameMovies, signal }) => {\n    const response = await axios.get('search/movie', {\n        signal,\n        params: {\n            api_key: KEY,\n            query: nameMovies,\n        }\n    });\n\n    return response.data.results;\n}\n\nexport const fetchMovieDetails = async ({ movieId, signal }) => {\n    const response = await axios.get(`movie/${movieId}`, {\n        signal,\n        params: { \n            api_key: KEY,\n            language: 'en-US' \n        }\n    })\n\n    return response.data;\n}\n\nexport const fetchCast = async ({ movieId, signal }) => {\n    const response = await axios.get(`movie/${movieId}/credits`, {\n        signal,\n        params: {\n            api_key: KEY,\n            language: 'en-US'\n        }\n    })\n\n    return response.data.cast;\n}\n\nexport const fetchReviews = async ({ movieId, signal }) => {\n    const response = await axios.get(`movie/${movieId}/reviews`, {\n        signal,\n        params: {\n            api_key: KEY,\n            language: 'en-US' \n        }\n    });\n\n    return response.data.results;\n}","import Loader from \"components/Loader\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCast } from \"Services/Services\";\nimport placeholderImage from \"../../imgPlaceholder/png-transparent-silhouette-man-silhouette-animals-silhouette-public-domain.png\";\n\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const { movieId } = useParams();\n    const abortController = useRef();\n\n    useEffect(() => {\n        const getCastDetails = async () => {\n            try {\n                if(abortController.current){\n                    abortController.current.abort();\n                }\n\n                abortController.current = new AbortController();\n\n                setLoading(true);\n                setError(null);\n\n                const castDetails = await fetchCast({\n                    movieId: movieId,\n                    signal: abortController.current.signal\n                });\n\n                setCast(castDetails);\n                setError(null);\n            } catch (error) {\n                if (error.code !== 'ERR_CANCELED') {\n                    setError(\"Sorry, an error occurred :( Try reloading the page!\");\n                    setLoading(false);\n                }\n            } finally {\n                setLoading(false);\n            } \n        };\n        getCastDetails();\n    }, [movieId]);\n\n\n\n    return (\n        <div>\n            {loading && <Loader />}\n            {cast && <ul>\n                        {cast.map(({ id, name, character, original_name, profile_path, popularity }) => (\n                            <li key={id}>\n                                <img src={profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : placeholderImage} alt={name} width={150}/>\n                                <h3>{original_name}</h3>\n                                <h4>Played the role of a character: {character}</h4>\n                                <p>Actor's popularity statistics: {popularity}</p>\n                            </li>\n                        ))}\n                    </ul>}\n            {error && <div>{error.message}</div> }\n        </div>\n    )\n}\n\nexport default Cast;"],"names":["KEY","axios","fetchTrendingMovies","signal","params","api_key","language","response","data","results","fetchMovies","nameMovies","query","fetchMovieDetails","movieId","fetchCast","cast","fetchReviews","useState","setCast","loading","setLoading","error","setError","useParams","abortController","useRef","useEffect","getCastDetails","current","abort","AbortController","castDetails","code","Loader","map","id","name","character","original_name","profile_path","popularity","src","alt","width","message"],"sourceRoot":""}